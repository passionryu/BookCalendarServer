#name: Upload and Deploy to On-Premise Server
#
#on:
#  push:
#    branches:
#      - master
#
#jobs:
#  upload-and-deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. 코드 체크아웃
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # 2. SSH 설정
#      - name: Setup SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
#
#      # 3. 대상 디렉토리 생성 및 권한 설정
#      - name: Ensure deploy directory exists
#        run: |
#          ssh -T -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
#            mkdir -p ${{ secrets.DEPLOY_PATH }}
#            chown t25101:ce20251 ${{ secrets.DEPLOY_PATH }}
#            chmod u+rwx ${{ secrets.DEPLOY_PATH }}
#            # 기존 불필요한 파일 제거
#            rm -f ${{ secrets.DEPLOY_PATH }}/id_rsa
#            rm -rf ${{ secrets.DEPLOY_PATH }}/auto
#          EOF
#
#      # 4. 코드 서버로 업로드
#      - name: Upload code to server
#        run: |
#          rsync -avz --chown=t25101:ce20251 --exclude '.git' --exclude 'id_rsa' --exclude 'auto' -e "ssh -i ~/.ssh/id_rsa" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}/
#
#      # 5. 설정 파일 확인 및 생성
#      - name: Ensure configuration files exist
#        run: |
#          ssh -T -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
#            cd ${{ secrets.DEPLOY_PATH }}
#            # 디렉토리 생성
#            mkdir -p nginx/html redis-session redis-cache mariadb prometheus grafana
#            # 설정 파일 생성 및 내용 추가
#            cat > nginx/nginx.conf << 'INNER_EOF'
#            server {
#                listen 80;
#                location / {
#                    proxy_pass http://springboot:8080;
#                    proxy_set_header Host $host;
#                    proxy_set_header X-Real-IP $remote_addr;
#                }
#            }
#            INNER_EOF
#            echo "requirepass 1234" > redis-session/redis.conf
#            echo "requirepass 1234" > redis-cache/redis.conf
#            cat > mariadb/my.cnf << 'INNER_EOF'
#            [mysqld]
#            character-set-server=utf8mb4
#            collation-server=utf8mb4_unicode_ci
#            INNER_EOF
#            cat > prometheus/prometheus.yml << 'INNER_EOF'
#            global:
#              scrape_interval: 15s
#            scrape_configs:
#              - job_name: 'redis-exporter'
#                static_configs:
#                  - targets: ['redis-exporter-session:9121', 'redis-exporter-cache:9121']
#            INNER_EOF
#            cat > grafana/grafana.ini << 'INNER_EOF'
#            [auth]
#            disable_login_form = false
#            INNER_EOF
#            # 소유자 및 권한 설정
#            chown -R t25101:ce20251 nginx redis-session redis-cache mariadb prometheus grafana
#            chmod -R u+rwx nginx redis-session redis-cache mariadb prometheus grafana
#          EOF
#
#      # 6. 컨테이너 배포
#      - name: Deploy containers using podman-compose
#        run: |
#          ssh -T -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
#          cd ${{ secrets.DEPLOY_PATH }}
#          CONTAINERS=$(podman ps -aq)
#          if [ -n "$CONTAINERS" ]; then
#          podman rm -f $CONTAINERS
#          fi
#
#          podman network rm bookcalendar_network || true
#          podman system prune -f
#          podman-compose down --remove-orphans
#          podman-compose up -d --build || (podman logs springboot && exit 1)
#          podman ps -a
#          EOF