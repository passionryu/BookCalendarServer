user  nginx; ## 보안상 낮은 user권한으로 nginx 실행
worker_processes  auto; # CPU 코어 수에 맞게 워커 프로세스를 자동 설정 → 병렬성 ↑

error_log  /var/log/nginx/error.log notice; # 에러 로그 경로
pid        /var/run/nginx.pid; # nginx PID 파일 위치 설정

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on; # 커널 수준에서 파일을 효율적으로 전송
    keepalive_timeout  65; # 클라이언트 연결을 65초까지 유지 (재연결 최소화)

    upstream springboot {
        server springboot:8080; # 컨테이너 이름 springboot를 호스트로 사용, 내부 포트 8080에 연결
    } # Nginx에서 /api 요청 시 이 쪽으로 프록시

    server { # 외부 포트 8080 → 내부 포트 80으로 매핑됨
        listen       80;
        server_name  localhost;

        location /api { # /api로 들어오는 요청은 내부 springboot 컨테이너(포트 8080)로 전달
            proxy_pass http://springboot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }





        location / {
             root   /usr/share/nginx/html;
             index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html; # 서버 오류(5xx) 발생 시 커스텀 HTML 페이지 반환
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
} 