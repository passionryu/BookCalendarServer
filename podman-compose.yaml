version: '3'

services:
  nginx:
    image: docker.io/library/nginx:latest  # 엔진 X 최신 버전 이미지를 도커 허브에서 가져옴 -> 정확한 버전을 명시하는 것이 좋을 수도 있음
    container_name: nginx # podman ps 혹은 docker ps 할 때 보이는 이름
    restart: always # 컨테이너가 예기치 않게 종료되면 항상 재시작하도록 설정
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf # 로컬의 ./nginx/nginx.conf 파일을 컨테이너 내의 설정 파일 경로 /etc/nginx/nginx.conf에 바인딩
      - ./nginx/html:/usr/share/nginx/html
      - /home/t25101/v0.5/admin/login:/home/t25101/v0.5/admin/login:ro # host PC의 로그인 페이지 마운팅 / 현재 컨테이너 환경과 hostPC의 로그인 페이지는 분리되어 있음
    ports:
      - "60001:60001"
      - "8080:80" # 호스트의 8080번 포트 → 컨테이너의 80번 포트 (HTTP 기본)
      - "8443:443" # 호스트의 8443 포트 → 컨테이너의 443 포트 (HTTPS)
    depends_on:
      - springboot
    networks:
      - bookcalendar_network

    #extra_hosts:
    # - "host.docker.internal:192.9.202.17"
    # 실행 순서 정리 (다만, 서비스 시작 순서 보장 X)
    # 예시로 springboot가 뜨기 전에 nginx가 reverse proxy를 시도하면 502 오류 가능

  springboot:
    image: springboot-app
    container_name: springboot
    build:
      context: ./springboot
      dockerfile: dockerfile
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      # 캐싱용 Redis (컨테이너)
      - SPRING_DATA_REDIS_CACHE_HOST=redis-cache
      - SPRING_DATA_REDIS_CACHE_PORT=6379
      - SPRING_DATA_REDIS_CACHE_PASSWORD=1234
      # 세션용 Redis (컨테이너)
      - SPRING_DATA_REDIS_SESSION_HOST=redis-session
      - SPRING_DATA_REDIS_SESSION_PORT=6379
      - SPRING_DATA_REDIS_SESSION_PASSWORD=1234
      # MariaDB (컨테이너)
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/bookcalendar
      - SPRING_DATASOURCE_USERNAME=bookcalendar
      - SPRING_DATASOURCE_PASSWORD=bookcalendar123
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_JPA_SHOW_SQL=true
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_ORG_HIBERNATE=INFO
      - LOGGING_LEVEL_ORG_HIBERNATE_SQL=INFO
      # SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect
    ports:
      - "8081:8080"
    depends_on:
      - redis-session
      - redis-cache
      - mariadb
    networks:
      - bookcalendar_network

  redis-session:
    image: docker.io/library/redis:latest
    container_name: redis-session
    restart: always
    command: redis-server /usr/local/etc/redis/redis-session.conf
    volumes:
      - ./redis-session/redis.conf:/usr/local/etc/redis/redis-session.conf
      - redis-session-data:/data
    #ports: -> Redis 외부 노출 경로 삭제
    #  - "6382:6379"
    networks:
      - bookcalendar_network

  redis-exporter-session:
    image: docker.io/oliver006/redis_exporter:latest
    container_name: redis-exporter-session
    command:
      - '--redis.addr=redis://:1234@redis-session:6379'
    depends_on:
      - redis-session
    networks:
      - bookcalendar_network

  redis-cache:

    image: docker.io/library/redis:latest
    container_name: redis-cache
    restart: always
    command: redis-server /usr/local/etc/redis/redis-cache.conf
    volumes:
      - ./redis-cache/redis.conf:/usr/local/etc/redis/redis-cache.conf
      - redis-cache-data:/data
    #ports: -> Redis 외부 노출 경로 삭제
    #  - "6381:6379"
    networks:
      - bookcalendar_network

  redis-exporter-cache:
    image: docker.io/oliver006/redis_exporter:latest
    container_name: redis-exporter-cache
    command:
      - '--redis.addr=redis://:1234@redis-cache:6379'
    depends_on:
      - redis-cache
    networks:
      - bookcalendar_network

  mariadb:
    image: docker.io/library/mariadb:latest
    container_name: mariadb
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=bookcalendar
      - MYSQL_USER=bookcalendar
      - MYSQL_PASSWORD=bookcalendar123
    volumes:
      - ./mariadb/my.cnf:/etc/mysql/conf.d/my.cnf
      - mariadb-data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - bookcalendar_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: docker.io/prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - bookcalendar_network

  grafana:
    image: docker.io/grafana/grafana:latest
    container_name: grafana
    restart: always
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=eric1225^^
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - bookcalendar_network

networks:
  bookcalendar_network:
    driver: bridge

volumes:
  redis-session-data:
  redis-cache-data:
  prometheus-data:
  grafana-data:
  mariadb-data:
